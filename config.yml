scope: postgres
namespace: /db/
name: node1

restapi:
  listen: node-1-server-ip:8008
  connect_address: node-1-server-ip:8008
#  Certfile: /etc/ssl/certs/ssl-Cert-snakeoil.pem
#  Keyfile: /etc/ssl/private/ssl-Cert-snakeoil.key
#  Authentication:
#    Username: Username
#    Password: Password

# Ctl:
#   Insecure: False # Allow Connections to SSL Sites Without Certs
#   Certfile: /etc/ssl/certs/ssl-Cert-snakeoil.pem
#   Cacert: /etc/ssl/certs/ssl-Cacert-snakeoil.pem

etcd:
  #Provide host to do the initial discovery of the cluster topology:
  host: node-4-server-ip:2379
  #Or use "hosts" to provide multiple endpoints
  #Could be a comma separated string:
  #hosts: host1:port1,host2:port2
  #or an actual yaml list:
  #hosts:
  #- host1:port1
  #- host2:port2
  #Once discovery is complete Patroni will use the list of advertised clientURLs
  #It is possible to change this behavior through by setting:
  #use_proxies: true

#Raft:
#  data_dir: .
#  self_addr: 127.0.0.1:2222
#  partner_addrs:
#  - 127.0.0.1:2223
#  - 127.0.0.1:2224

bootstrap:
  # this section will be written into Etcd:///config after initializing new cluster
  # and all other cluster members will use it as a `global configuration`
  dcs:
    ttl: 30
    loop_wait: 10
    retry_timeout: 10
    maximum_lag_on_failover: 1048576
#    master_start_timeout: 300
#    synchronous_mode: False
    #standby_cluster:
      #host: 127.0.0.1
      #port: 1111
      #primary_slot_name: patroni
    postgresql:
      use_pg_rewind: true
#      use_slots: True
      parameters:
#        wal_level: hot_standby
#        hot_standby: "on"
#        wal_keep_segments: 8
#        max_wal_senders: 10
#        max_replication_slots: 10
#        wal_log_hints: "on"
#        archive_mode: "on"
#        archive_timeout: 1800s
#        archive_command: Mkdir -P ../wal_archive && Test ! -F ../wal_archive/%F && Cp %P ../wal_archive/%F
#      recovery_conf:
#        restore_command: Cp ../wal_archive/%F %P

  # some desired options for 'initdb'
  initdb:  # Note: It needs to be a list (some options need values, others are switches)
  - encoding: UTF8
  - data-checksums

  pg_hba:  # Add following lines to pg_hba.conf after running 'initdb'
  # For kerberos gss based connectivity (discard @.*$)
  #- host replication replicator 127.0.0.1/32 gss include_realm=0
  #- host all all 0.0.0.0/0 gss include_realm=0
  - host replication replicator 127.0.0.1/32 md5
  - host replication replicator node-1-server-ip/0 md5
  - host replication replicator node-2-server-ip/0 md5
  - host replication replicator node-3-server-ip/0 md5
  - host all all 0.0.0.0/0 md5
#  - Hostssl All All 0.0.0.0/0 Md5

  # Additional script to be launched after initial cluster creation (will be passed the connection URL as parameter)
# post_init: /usr/local/bin/setup_cluster.sh

  # Some additional users users which needs to be created after initializing new cluster
  users:
    admin:
      password: admin
      options:
        - createrole
        - createdb

postgresql:
  listen: node-1-server-ip:5432
  connect_address: node-1-server-ip:5432
  data_dir: /data/patroni
#  bin_dir:
#  config_dir:
  pgpass: /tmp/pgpass0
  authentication:
    replication:
      username: replicator
      password: rep-pass
    superuser:
      username: postgres
      password: zalando
    rewind:  # Has no effect on postgres 10 and lower
      username: rewind_user
      password: rewind_password
  # Server side kerberos spn
#  Krbsrvname: Postgres
  parameters:
    # Fully qualified kerberos ticket file for the running user
    # same as KRB5CCNAME used by the GSS
#   krb_server_keyfile: /var/spool/keytabs/postgres
    unix_socket_directories: '.'

#Watchdog:
#  Mode: Automatic # Allowed Values: Off, Automatic, Required
#  Device: /dev/watchdog
#  safety_margin: 5

tags:
    nofailover: false
    noloadbalance: false
    clonefrom: false
    nosync: false